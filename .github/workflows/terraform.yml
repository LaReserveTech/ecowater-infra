name: Deploy Infrastructure via Terraform

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_database_username: ${{ secrets.TF_VAR_DATABASE_USERNAME }}
  TF_VAR_database_password: ${{ secrets.TF_VAR_DATABASE_PASSWORD }}

permissions:
  contents: read

jobs:
  tf_checks:
    name: Terraform Checks
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      uses: hashicorp/terraform-github-actions@v0.8.0
      with:
        tf_actions_version: 1.3.7
        tf_actions_subcommand: 'fmt'

  tf_dev:
    name: Development Environment
    runs-on: ubuntu-latest
    environment: dev
    needs: [tf_checks]

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      uses: hashicorp/terraform-github-actions@v0.8.0
      with:
        tf_actions_version: 1.3.7
        tf_actions_subcommand: 'init'
        args: '-backend-config="bucket= ${{ secrets.S3_BUCKET }}" -backend-config="region=${{ secrets.S3_REGION }}" -backend-config="dynamodb_table=${{ secrets.DYNAMODB }}"'
      env:
        TF_WORKSPACE: 'dev'

    - name: Terraform Validate
      uses: hashicorp/terraform-github-actions@v0.8.0
      with:
        tf_actions_version: 1.3.7
        tf_actions_subcommand: 'validate'
      env:
        TF_WORKSPACE: 'dev'

    # Generates an execution plan for Terraform
    - name: 'Terraform Plan'
      uses: hashicorp/terraform-github-actions@v0.8.0
      with:
        tf_actions_version: 1.3.7
        tf_actions_subcommand: 'plan'
      env:
        TF_WORKSPACE: 'dev'
  
  tf_prod:
    name: Production Environment
    runs-on: ubuntu-latest
    environment: prod
    needs: [tf_checks]

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      uses: hashicorp/terraform-github-actions@v0.8.0
      with:
        tf_actions_version: 1.3.7
        tf_actions_subcommand: 'init'
        args: '-backend-config="bucket=${{ secrets.S3_BUCKET }}" -backend-config="region=${{ secrets.S3_REGION }}" -backend-config="dynamodb_table=${{ secrets.DYNAMODB }}"'
      env:
        TF_WORKSPACE: 'prod'

    - name: Terraform Validate
      uses: hashicorp/terraform-github-actions@v0.8.0
      with:
        tf_actions_version: 1.3.7
        tf_actions_subcommand: 'validate'
      env:
        TF_WORKSPACE: 'prod'

    # Generates an execution plan for Terraform
    - name: 'Terraform Plan'
      uses: hashicorp/terraform-github-actions@v0.8.0
      with:
        tf_actions_version: 1.3.7
        tf_actions_subcommand: 'plan'
      env:
        TF_WORKSPACE: 'prod'